class Student:
  def __init__(self, name, surname, gender):
    self.name = name
    self.surname = surname
    self.gender = gender
    self.courses_in_progress = []
    self.finished_courses = []
    self.grades = {}
  
  def rate_lecturer(self, lecturer, course, grade):
    if isinstance(lecturer, Lecturer) and course in self.courses_in_progress and course in lecturer.courses_attached:
      if course in lecturer.grades_by_students:
        lecturer.grades_by_students[course] += [grade]
      else:
        lecturer.grades_by_students[course] = [grade]
    else:
      return 'Ошибка'

  def average_hw_grades(self):
    marks = self.grades.values()
    sum_grades = 0
    all_grades = 0
    for i in marks:
      for j in i:
        sum_grades += j
        all_grades += 1
        average = sum_grades / all_grades
    return average 
  
  def __lt__(self, other):
    if not isinstance(other, Student):
      print('Not a Student!')
      return
    return self.average_hw_grades() < other.average_hw_grades()  

  def __str__(self):
    output_students = f'Имя: {self.name} \nФамилия: {self.surname} \nСредняя оценка за домашние задания: {self.average_hw_grades()} \nКурсы в процессе изучения: {self.courses_in_progress} \nЗавершенные курсы: {self.finished_courses}'
    return output_students 


class Mentor:
  def __init__(self, name, surname):
    self.name = name
    self.surname = surname
    self.courses_attached = []
    self.grades_by_students = {}


class Lecturer(Mentor):
  def __init__(self, name, surname):
    super().__init__(name, surname)

  def average_grades(self):
    marks = self.grades_by_students.values()
    sum_grades = 0
    all_grades = 0
    for i in marks:
      for j in i:
        sum_grades += j
        all_grades += 1
        average = sum_grades / all_grades
    return average

  def __lt__(self, other):
    if not isinstance(other, Lecturer):
      print('Not a Lecturer!')
      return
    return self.average_grades() < other.average_grades()    
    
  def __str__(self):
    output_lectures = f'Имя: {self.name} \nФамилия: {self.surname} \nСредняя оценка за лекции: {self.average_grades()}'
    return output_lectures 


class Reviewer(Mentor):
  def __init__(self, name, surname):
    super().__init__(name, surname)

  def rate_hw(self, student, course, grade):
    if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
      if course in student.grades:
        student.grades[course] += [grade]
      else:
        student.grades[course] = [grade]
    else:
      return 'Ошибка'

  def __str__(self):
    output_reviewers = f'Имя: {self.name} \nФамилия: {self.surname}'
    return output_reviewers 


#Ввод студента
student1 = Student('Nickolai', 'Rukiev', 'Male')
student1.courses_in_progress.append('Python')
student1.courses_in_progress.append('Git')
student1.finished_courses.append('Введение в программирование')

student2 = Student('Danil', 'Sitnikov', 'Male')
student2.courses_in_progress.append('Python')
student2.courses_in_progress.append('Git')
student2.finished_courses.append('Введение в программирование')
#Ввод лектора
lecturer1 = Lecturer('Oleg', 'Bulka')
lecturer1.courses_attached.append('Python')

lecturer2 = Lecturer('Alex', 'Miami')
lecturer2.courses_attached.append('Python')
#Ввод ревьюера
reviewer1 = Reviewer('Stepan', 'Nogiev')
reviewer1.courses_attached.append('Python')
reviewer1.courses_attached.append('Git')

reviewer2 = Reviewer('Ivan', 'Grozniy')
reviewer2.courses_attached.append('Python')
reviewer2.courses_attached.append('Git')
#Ревьюер выставляет оценку за д/з
reviewer1.rate_hw(student1, 'Python', 10)
reviewer1.rate_hw(student2, 'Python', 6)
reviewer2.rate_hw(student1, 'Python', 10)
reviewer2.rate_hw(student2, 'Python', 3)
reviewer1.rate_hw(student1, 'Python', 9)
reviewer1.rate_hw(student2, 'Python', 4)
reviewer2.rate_hw(student1, 'Python', 7)
reviewer2.rate_hw(student2, 'Python', 3)
#Студент выставляет оценку за прослушанную лекцию
student1.rate_lecturer(lecturer1, 'Python', 6)
student1.rate_lecturer(lecturer2, 'Python', 9)
student2.rate_lecturer(lecturer1, 'Python', 8)
student2.rate_lecturer(lecturer2, 'Python', 9)
student1.rate_lecturer(lecturer1, 'Python', 10)
student1.rate_lecturer(lecturer2, 'Python', 10)
student2.rate_lecturer(lecturer1, 'Python', 7)
student2.rate_lecturer(lecturer2, 'Python', 7)

#Вывод №3 Задание
print('**********REVIEWER**********')
print(reviewer1, '\n')
print(reviewer2, '\n')
print('**********LECTURER**********')
print(lecturer1, '\n')
print(lecturer2, '\n')
print('**********STUDENT**********')
print(student1)
print(student2)
print('\n')
print(lecturer1 < lecturer2)
print(student1 > student2)
print('\n')
#Задание 4
student_list = [student1.grades.values(), student2.grades.values()]
def average_grades_all_students(list_s, course):
  count_s = 0
  marks = 0
  for i in list_s:
    for j in i:
      for g in j:
        marks += g
        count_s += 1
  Res_s = marks/count_s
  print(f'Средняя оценка за домашние задания у студентов -> {Res_s} за курс - {course}')

lecturer_list = [lecturer1.grades_by_students.values(), lecturer2.grades_by_students.values()]
def average_grades_all_lecturers(list_l, course):
  count_l = 0
  marks = 0
  for i in list_l:
    for j in i:
      for g in j:
        marks += g
        count_l += 1
  Res_l = marks/count_l
  print(f'Средняя оценка за лекции у лекторов -> {Res_l} за курс - {course}')

average_grades_all_lecturers(lecturer_list, 'Python')
average_grades_all_students(student_list, 'Python')
